// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Offer {
  id                      String               @id @default(cuid())
  latestNotifyUsers       Json?                @default("[]")
  contacts                Json?
  expirationInDays        Int
  experienceAt            DateTime?            @default(now())
  dealValue               Float
  comment                 String               @default("")
  paymentType             OfferPaymentTypeType
  owner                   User?                @relation("Offer_owner", fields: [ownerId], references: [id])
  ownerId                 String?              @map("owner")
  receivers               User[]               @relation("Offer_receivers")
  createdAt               DateTime?            @default(now())
  dealType                OfferDealTypeType    @default(FIXED)
  from_Contract_offer     Contract[]           @relation("Contract_offer")
  from_Notification_offer Notification[]       @relation("Notification_offer")

  @@index([ownerId])
}

model Bank {
  id                 String     @id @default(cuid())
  name               String     @default("")
  bankId             Int
  from_User_bank     User[]     @relation("User_bank")
  from_Contract_bank Contract[] @relation("Contract_bank")
}

model User {
  id                             String                  @id @default(cuid())
  name                           String?
  fcmToken                       String                  @default("")
  languageByDefault              String?                 @default("he_IL")
  notifications                  Notification[]          @relation("Notification_recipient")
  accessToken                    String                  @unique @default("")
  authCompleted                  Boolean                 @default(false)
  transactions                   Transaction[]           @relation("Transaction_owner")
  email                          String                  @default("")
  idNumber                       String                  @default("")
  documents                      Document[]              @relation("Document_owner")
  bank                           Bank?                   @relation("User_bank", fields: [bankId], references: [id])
  bankId                         String?                 @map("bank")
  bankBranchNumber               Int?
  bankAccountNumber              Int?
  bankOwnerName                  String                  @default("")
  contactFormSubmissions         ContactFormSubmission[] @relation("ContactFormSubmission_sender")
  company                        Company?                @relation("User_company", fields: [companyId], references: [id])
  companyId                      String?                 @unique @map("company")
  isSuperAdmin                   Boolean                 @default(false)
  isAdmin                        Boolean                 @default(false)
  isActive                       Boolean                 @default(true)
  photoKey                       String                  @default("")
  phoneNumber                    String                  @unique @default("")
  password                       String
  lastLoginAt                    DateTime?               @default(now())
  updatedAt                      DateTime?               @default(now())
  createdAt                      DateTime?               @default(now())
  receivedContracts              Contract[]              @relation("Contract_receiver")
  referralContacts               Contract[]              @relation("Contract_referral")
  contracts                      Contract[]              @relation("Contract_owner")
  from_Offer_owner               Offer[]                 @relation("Offer_owner")
  from_Offer_receivers           Offer[]                 @relation("Offer_receivers")
  from_AdminContractComment_user AdminContractComment[]  @relation("AdminContractComment_user")

  @@index([bankId])
}

model ContactFormSubject {
  id                                 String                  @id @default(cuid())
  name                               String                  @default("")
  description                        String                  @default("")
  createdAt                          DateTime?               @default(now())
  from_ContactFormSubmission_subject ContactFormSubmission[] @relation("ContactFormSubmission_subject")
}

model ContactFormSubmission {
  id        String              @id @default(cuid())
  subject   ContactFormSubject? @relation("ContactFormSubmission_subject", fields: [subjectId], references: [id])
  subjectId String?             @map("subject")
  message   String              @default("")
  sender    User?               @relation("ContactFormSubmission_sender", fields: [senderId], references: [id])
  senderId  String?             @map("sender")

  @@index([subjectId])
  @@index([senderId])
}

model Document {
  id                                           String        @id @default(cuid())
  name                                         String        @default("")
  key                                          String        @default("")
  type                                         DocumentType? @relation("Document_type", fields: [typeId], references: [id])
  typeId                                       String?       @map("type")
  createdAt                                    DateTime?     @default(now())
  updatedAt                                    DateTime?     @default(now())
  contract                                     Contract?     @relation("Document_contract", fields: [contractId], references: [id])
  contractId                                   String?       @map("contract")
  owner                                        User?         @relation("Document_owner", fields: [ownerId], references: [id])
  ownerId                                      String?       @map("owner")
  company                                      Company?      @relation("Document_company", fields: [companyId], references: [id])
  companyId                                    String?       @map("company")
  from_Contract_contractDocument               Contract[]    @relation("Contract_contractDocument")
  from_Transaction_bankTransferConfirmDocument Transaction[] @relation("Transaction_bankTransferConfirmDocument")

  @@index([typeId])
  @@index([contractId])
  @@index([ownerId])
  @@index([companyId])
}

model BusinessCategory {
  id                    String    @id @default(cuid())
  name                  String    @default("")
  description           String    @default("")
  order                 Int?
  createdAt             DateTime? @default(now())
  from_Company_category Company[] @relation("Company_category")
}

model Company {
  id                       String                 @id @default(cuid())
  logoKey                  String                 @default("")
  documents                Document[]             @relation("Document_company")
  owner                    User?                  @relation("User_company")
  name                     String                 @default("")
  dealerType               CompanyDealerTypeType?
  businessId               String                 @default("")
  dealerId                 String                 @default("")
  category                 BusinessCategory?      @relation("Company_category", fields: [categoryId], references: [id])
  categoryId               String?                @map("category")
  contactEmail             String                 @default("")
  contactPhoneNumber       String                 @default("")
  extraPhoneNumber         String                 @default("")
  address                  String                 @default("")
  hasTransactionPermission Boolean                @default(false)
  createdAt                DateTime?              @default(now())
  updatedAt                DateTime?              @default(now())

  @@index([categoryId])
}

model CharityAssociation {
  id          String     @id @default(cuid())
  name        String     @default("")
  description String     @default("")
  contracts   Contract[] @relation("Contract_charityAssociation")
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @default(now())
}

model AdminContractComment {
  id         String    @id @default(cuid())
  contract   Contract? @relation("AdminContractComment_contract", fields: [contractId], references: [id])
  contractId String?   @map("contract")
  user       User?     @relation("AdminContractComment_user", fields: [userId], references: [id])
  userId     String?   @map("user")
  comment    String    @default("")
  createdAt  DateTime? @default(now())

  @@index([contractId])
  @@index([userId])
}

model ContractRejectReason {
  id          String                           @id @default(cuid())
  name        String                           @unique @default("")
  subject     ContractRejectReasonSubjectType?
  description String                           @default("")
  order       Int?
  createdAt   DateTime?                        @default(now())
}

model Contract {
  id                         String                  @id @default(cuid())
  isRecipientTermsRead       Boolean                 @default(false)
  isRecipientTermsAgreed     Boolean                 @default(false)
  signature                  String                  @default("")
  notifications              Notification[]          @relation("Notification_contract")
  offer                      Offer?                  @relation("Contract_offer", fields: [offerId], references: [id])
  offerId                    String?                 @map("offer")
  adminComments              AdminContractComment[]  @relation("AdminContractComment_contract")
  overwriteBankDetails       Boolean                 @default(false)
  contractId                 Int?                    @unique
  receiverName               String                  @default("")
  receiverPhoneNumber        String                  @default("")
  receiver                   User?                   @relation("Contract_receiver", fields: [receiverId], references: [id])
  receiverId                 String?                 @map("receiver")
  referralContactName        String                  @default("")
  referralContactPhoneNumber String                  @default("")
  referral                   User?                   @relation("Contract_referral", fields: [referralId], references: [id])
  referralId                 String?                 @map("referral")
  owner                      User?                   @relation("Contract_owner", fields: [ownerId], references: [id])
  ownerId                    String?                 @map("owner")
  comment                    String                  @default("")
  contractDocument           Document?               @relation("Contract_contractDocument", fields: [contractDocumentId], references: [id])
  contractDocumentId         String?                 @map("contractDocument")
  status                     ContractStatusType?     @default(NEW)
  rejectionReason            String                  @default("")
  charityAssociation         CharityAssociation?     @relation("Contract_charityAssociation", fields: [charityAssociationId], references: [id])
  charityAssociationId       String?                 @map("charityAssociation")
  buyMePhoneNumber           String                  @default("")
  dealType                   ContractDealTypeType
  dealValue                  Float
  feeValue                   Float?
  dealPrice                  Float?
  netValueAfterTax           Float?
  paymentType                ContractPaymentTypeType
  bank                       Bank?                   @relation("Contract_bank", fields: [bankId], references: [id])
  bankId                     String?                 @map("bank")
  bankBranchNumber           Int?
  bankAccountNumber          Int?
  bankOwnerName              String                  @default("")
  transactions               Transaction[]           @relation("Transaction_contract")
  createdAt                  DateTime?               @default(now())
  updatedAt                  DateTime?               @default(now())
  readAt                     DateTime?
  signedAt                   DateTime?
  dealClosedAt               DateTime?
  paidAt                     DateTime?
  rejectedAt                 DateTime?
  completedAt                DateTime?
  droppedAt                  DateTime?
  from_Document_contract     Document[]              @relation("Document_contract")
  from_CronLog_contract      CronLog[]               @relation("CronLog_contract")

  @@index([offerId])
  @@index([receiverId])
  @@index([referralId])
  @@index([ownerId])
  @@index([contractDocumentId])
  @@index([charityAssociationId])
  @@index([bankId])
}

model CronTask {
  id                    String               @id @default(cuid())
  createdAt             DateTime?            @default(now())
  subject               CronTaskSubjectType?
  from_CronLog_cronTask CronLog[]            @relation("CronLog_cronTask")
}

model CronLog {
  id            String              @id @default(cuid())
  createdAt     DateTime?           @default(now())
  notifications Notification[]      @relation("CronLog_notifications")
  cronTask      CronTask?           @relation("CronLog_cronTask", fields: [cronTaskId], references: [id])
  cronTaskId    String?             @map("cronTask")
  contract      Contract?           @relation("CronLog_contract", fields: [contractId], references: [id])
  contractId    String?             @map("contract")
  subject       CronLogSubjectType?

  @@index([cronTaskId])
  @@index([contractId])
}

model NotificationTemplate {
  id            String                        @id @default(cuid())
  type          NotificationTemplateTypeType?
  color         String?
  language      String?                       @default("en")
  smsTemplate   String                        @default("")
  emailTemplate Json                          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  titleTemplate String                        @default("")
  bodyTemplate  String                        @default("")
}

model Notification {
  id                         String                @id @default(cuid())
  type                       NotificationTypeType?
  recipient                  User?                 @relation("Notification_recipient", fields: [recipientId], references: [id])
  recipientId                String?               @map("recipient")
  offer                      Offer?                @relation("Notification_offer", fields: [offerId], references: [id])
  offerId                    String?               @map("offer")
  contract                   Contract?             @relation("Notification_contract", fields: [contractId], references: [id])
  contractId                 String?               @map("contract")
  isRead                     Boolean               @default(false)
  createdAt                  DateTime?             @default(now())
  readAt                     DateTime?
  sentToName                 String                @default("")
  sentToPhoneNumber          String                @default("")
  sentToEmail                String                @default("")
  from_CronLog_notifications CronLog[]             @relation("CronLog_notifications")

  @@index([recipientId])
  @@index([offerId])
  @@index([contractId])
}

model Transaction {
  id                            String                      @id @default(cuid())
  userEmail                     String                      @default("")
  userPhoneNumber               String                      @default("")
  owner                         User?                       @relation("Transaction_owner", fields: [ownerId], references: [id])
  ownerId                       String?                     @map("owner")
  paymentId                     Int?                        @unique
  paymentProfileId              String                      @default("")
  paymentUrl                    String                      @default("")
  refContractId                 String                      @default("")
  contract                      Contract?                   @relation("Transaction_contract", fields: [contractId], references: [id])
  contractId                    String?                     @map("contract")
  amount                        Float
  status                        TransactionStatusType?      @default(PENDING)
  paymentType                   TransactionPaymentTypeType? @default(CREDIT_CARD)
  bankTransferConfirmDocument   Document?                   @relation("Transaction_bankTransferConfirmDocument", fields: [bankTransferConfirmDocumentId], references: [id])
  bankTransferConfirmDocumentId String?                     @map("bankTransferConfirmDocument")
  bankTransferConfirmNumber     String                      @default("")
  bankTransferComment           String                      @default("")
  transactionInfo               Json?
  paymentGatewayTransactionId   Int?
  responseCode                  Int?
  responseMessage               String                      @default("")
  successPaidAt                 DateTime?
  failedPaidAt                  DateTime?
  rejectedPaidAt                DateTime?
  createdAt                     DateTime?                   @default(now())

  @@index([ownerId])
  @@index([paymentProfileId])
  @@index([contractId])
  @@index([bankTransferConfirmDocumentId])
}

model SiteSetting {
  id                           Int     @id
  testMode                     Boolean @default(false)
  paymentDescriptionTemplate   String  @default("Payment for contract {{contractId}}")
  cronResponseRemindPeriodDays Int?    @default(7)
  cronPaymentRemindPeriodDays  Int?    @default(7)
  onboardingPageCount          Int?    @default(3)
  globalCurrencySymbol         String  @default("USD")
  feeValue                     Float?  @default(10)
  contractDocument             Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  contactEmail                 String  @default("")
  contactPhone                 String  @default("")
  contactAddress               String  @default("")
  contactWhatsapp              String  @default("")
}

model VerifyCode {
  id          String    @id @default(cuid())
  phoneNumber String    @unique @default("")
  token       String    @unique @default("688321bf-55f4-41c0-8bfc-6ecd3c84732b")
  code        String    @default("")
  createdAt   DateTime? @default(now())
}

model Menu {
  id        String     @id @default(cuid())
  name      String     @default("")
  slug      String     @unique @default("")
  menuItems MenuItem[] @relation("Menu_menuItems")
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @default(now())
}

model MenuItem {
  id                  String    @id @default(cuid())
  name                String    @default("")
  iconClassName       String?
  url                 String    @default("")
  target              String?   @default("_self")
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @default(now())
  from_Menu_menuItems Menu[]    @relation("Menu_menuItems")
}

model System {
  id           Int  @id
  order        Int? @default(0)
  paymentOrder Int? @default(0)
}

model Post {
  id                     String  @id @default(cuid())
  name                   String  @default("")
  description            String  @default("")
  content                Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  videoSource            String  @default("")
  posterSource_filesize  Int?
  posterSource_extension String?
  posterSource_width     Int?
  posterSource_height    Int?
  posterSource_id        String?
  language               String? @default("en")
}

model FAQ {
  id       String  @id @default(cuid())
  question String  @default("")
  answer   String  @default("")
  language String? @default("en")
  order    Int?    @default(0)
}

model DocumentType {
  id        String               @id @default(cuid())
  name      String               @unique @default("")
  ref       DocumentTypeRefType?
  documents Document[]           @relation("Document_type")
  createdAt DateTime?            @default(now())
  order     Int?                 @default(0)
}

model Page {
  id            String                 @id @default(cuid())
  name          String                 @default("")
  slug          String                 @default("")
  content       Json                   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  language      String?                @default("en")
  publishedAt   DateTime?
  publishStatus PagePublishStatusType? @default(DRAFT)
  createdAt     DateTime?              @default(now())
  updatedAt     DateTime?              @default(now())
}

enum OfferPaymentTypeType {
  BANK_TRANSFER
  BUYME_POINTS
  DONATE
}

enum OfferDealTypeType {
  PERCENTAGE
  FIXED
}

enum CompanyDealerTypeType {
  AUTHORIZED_DEALER
  EXEMPT_DEALER
  PRIVATE_COMPANY
  PUBLIC_COMPANY
  ASSOCIATION
  OTHER
}

enum ContractRejectReasonSubjectType {
  REJECT_CONTRACT
  REJECT_DEAL
}

enum ContractStatusType {
  NEW
  DROPPED
  SIGNED
  REJECTED
  DEAL_CLOSED
  PAYMENT_VERIFICATION
  PAID
  COMPLETED
}

enum ContractDealTypeType {
  PERCENTAGE
  FIXED
}

enum ContractPaymentTypeType {
  BANK_TRANSFER
  BUYME_POINTS
  DONATE
}

enum CronTaskSubjectType {
  RESPONSE_REMINDER
  PAYMENT_REMINDER
}

enum CronLogSubjectType {
  RESPONSE_REMINDER
  PAYMENT_REMINDER
}

enum NotificationTemplateTypeType {
  NEW_OFFER
  NEW_CONTRACT
  RESPONSE_REMINDER
  CONTRACT_DROPPED
  CONTRACT_REJECTED
  CONTRACT_SIGNED
  DEAL_CLOSED
  PAYMENT_REMINDER
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_COMPLETED
}

enum NotificationTypeType {
  NEW_OFFER
  NEW_CONTRACT
  RESPONSE_REMINDER
  CONTRACT_DROPPED
  CONTRACT_REJECTED
  CONTRACT_SIGNED
  DEAL_CLOSED
  PAYMENT_REMINDER
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_COMPLETED
}

enum TransactionStatusType {
  PENDING
  REJECTED
  SUCCESS
  FAILED
}

enum TransactionPaymentTypeType {
  BANK_TRANSFER
  CREDIT_CARD
}

enum DocumentTypeRefType {
  COMPANY
  CONTRACT
}

enum PagePublishStatusType {
  DRAFT
  PUBLISHED
}
